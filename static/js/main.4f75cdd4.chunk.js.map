{"version":3,"sources":["redux/contacts/contacts-operations.js","redux/contacts/contacts-actions.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/Container/Container.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["axios","defaults","baseURL","fetchContacts","createAsyncThunk","_","a","rejectWithValue","get","data","addContact","name","number","contact","post","deleteContact","id","delete","changeFilter","createAction","getContacts","state","contacts","items","getFilter","filter","getLoading","loading","getFilteredContacts","createSelector","normalizedFilter","toLowerCase","includes","ContactForm","useState","setName","setNumber","existingContacts","useSelector","dispatch","useDispatch","handleChange","event","target","value","className","onSubmit","preventDefault","newContact","map","alert","operations","type","onChange","pattern","title","required","Filter","currentTarget","ContactListItem","onDeleteContact","onClick","ContactList","Container","children","App","isLoading","useEffect","color","height","width","createReducer","fulfilled","payload","pending","rejected","error","action","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4f75cdd4.chunk.js","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'http://localhost:4040';\n\nexport const fetchContacts = createAsyncThunk(\n  'contacts/fetchContacts',\n  async (_, { rejectWithValue }) => {\n    try {\n      const { data } = await axios.get('/contacts');\n      return data;\n    } catch (error) {\n      return rejectWithValue(error);\n    }\n  },\n);\n\nexport const addContact = createAsyncThunk(\n  'contacts/addContact',\n  async ({ name, number }, { rejectWithValue }) => {\n    const contact = {\n    name,\n    number,\n    };\n    try {\n      const { data } = await axios.post('/contacts', contact);\n      return data;\n    } catch (error) {\n      return rejectWithValue(error);\n    }\n  },\n);\n\nexport const deleteContact = createAsyncThunk(\n  'contacts/deleteContact',\n  async (id, { rejectWithValue }) => {\n    try {\n      await axios.delete(`/contacts/${id}`);\n      return id;\n    } catch (error) {\n      return rejectWithValue(error);\n    }\n  },\n);\n\n\n\n\n\n\n/*\nimport axios from 'axios';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n} from './contacts-actions';\n\naxios.defaults.baseURL = 'http://localhost:4040';\n\nconst fetchContacts = () => async dispatch => {\n  dispatch(fetchContactsRequest());\n\n  try {\n    const { data } = await axios.get('/contacts');\n    dispatch(fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactsError(error));\n  };\n\n  // axios\n  //   .get('/contacts')\n  //   .then(({ data }) => dispatch(fetchContactsSuccess(data)))\n  //   .catch(error => dispatch(fetchContactsError(error)));\n}\n\nconst addContact = ({ name, number }) => async dispatch => {\n  const contact = {\n    name,\n    number,\n  };\n\n  dispatch(addContactRequest());\n\n  try {\n    const { data } = await axios.post('/contacts', contact);\n    dispatch(addContactSuccess(data));\n  } catch (error) {\n    dispatch(addContactError(error));\n  }\n\n  // axios\n  //   .post('/contacts', contact)\n  //   .then(({ data }) =>\n  //     dispatch(addContactSuccess(data)))\n  //   .catch(error => dispatch(addContactError(error)));\n};\n\nconst deleteContact = id => async dispatch => {\n  dispatch(deleteContactRequest());\n\n  try {\n    await axios.delete(`/contacts/${id}`);\n    dispatch(deleteContactSuccess(id));\n  } catch (error) {\n    dispatch(deleteContactError(error));\n  }\n\n  // axios\n  //   .delete(`/contacts/${id}`)\n  //   .then(() => dispatch(deleteContactSuccess(id)))\n  //   .catch(error => dispatch(deleteContactError(error)));\n};\n\nconst operations = { fetchContacts, addContact, deleteContact };\n\nexport default operations;\n*/","import { createAction } from '@reduxjs/toolkit';\n\nexport const changeFilter = createAction('contacts/changeFilter');\n\n\n\n\n// export const fetchContactsRequest = createAction('contacts/fetchContactsRequest');\n// export const fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\n// export const fetchContactsError = createAction('contacts/fetchContactsError');\n\n// export const addContactRequest = createAction('contacts/addContactRequest');\n// export const addContactSuccess = createAction('contacts/addContactSuccess');\n// export const addContactError = createAction('contacts/addContactError');\n\n// export const deleteContactRequest = createAction('contacts/deleteContactRequest');\n// export const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\n// export const deleteContactError = createAction('contacts/deleteContactError');","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\nexport const getLoading = state => state.contacts.loading;\n\nexport const getFilteredContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n\n\n// export const getFilteredContacts = state => {        //example without memoization\n//   const contacts = getContacts(state);\n//   const filter = getFilter(state);\n//   const normalizedFilter = filter.toLowerCase();\n\n//   return contacts.filter(({ name }) =>\n//     name.toLowerCase().includes(normalizedFilter),\n//   );\n// };","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { operations } from 'redux/contacts';\nimport { getContacts } from 'redux/contacts';\nimport './ContactForm.scss';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const existingContacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      \n      case 'number':\n        setNumber(value);\n        break;\n      \n      default:\n        return;\n    }\n  };\n  \n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const newContact = name.toLowerCase();\n    const existingContactsNames = existingContacts.map(contact => contact.name.toLowerCase());\n    if (existingContactsNames.includes(newContact)) {\n      alert(`${newContact} is already in contacts.`);\n      return;\n    }\n\n    dispatch(operations.addContact({name, number}));\n    setName('');\n    setNumber('');\n  };\n  \n    return (\n      <form className=\"contact-form\" onSubmit={handleSubmit}>\n      <label className=\"contact-form__label\">\n        Name\n        <input\n          type=\"text\"\n          className=\"contact-form__input\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label className=\"contact-form__label\">\n        Number\n        <input\n          type=\"tel\"\n          className=\"contact-form__input\"  \n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n        <button\n          type=\"submit\"\n          className=\"contact-form__btn\"\n        >\n        Add contact\n      </button> \n    </form>\n    )\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeFilter } from 'redux/contacts';\nimport { getFilter } from 'redux/contacts';\nimport './Filter.scss';\n\nconst Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label className=\"contact-filter\">\n      Find contacts by name\n      <input\n        type=\"text\"\n        className=\"contact-filter__input\"\n        value={value}\n        onChange={event => dispatch(changeFilter(event.currentTarget.value))} />\n    </label>\n  );\n};\n\nexport default Filter;\n\n\n\n\n// const mapStateToProps = (state) => ({\n//   value: state.contacts.filter,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onChange: (event) => dispatch(actions.changeFilter(event.target.value)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './ContactListItem.scss';\n\nconst ContactListItem = ({ name, number, onDeleteContact }) => (\n  <>\n    <span>{name}: {number}</span>\n    <button type=\"button\" className=\"contact-list__delete-btn\" onClick={onDeleteContact}>Delete</button>\n  </>\n);\n\nContactListItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ContactListItem from '../ContactListItem';\nimport { operations } from 'redux/contacts';\nimport { getFilteredContacts } from 'redux/contacts';\nimport './ContactList.scss';\n\n\nconst ContactList = () => {\n  const contacts = useSelector(getFilteredContacts);\n  const dispatch = useDispatch();\n\n  const onDeleteContact = id => dispatch(operations.deleteContact(id));\n\n  return(\n  <ul>\n    {contacts.map(({ id, name, number}) => (\n      <li key={id} className=\"contact-list__item\">\n        <ContactListItem\n          name={name}\n          number={number}\n          onDeleteContact={() => onDeleteContact(id)}\n        />\n      </li>\n    ))}\n  </ul>\n);\n};\n\nexport default ContactList;\n\n\n\n\n// const getFilteredContacts = (allContacts, filter) => {\n//   const normalizedFilter = filter.toLowerCase();\n\n//   return allContacts.filter(contact =>\n//     contact.name.toLowerCase().includes(normalizedFilter),\n//   );\n// };\n\n// const mapStateToProps = ({ contacts: { items, filter } }) => ({\n//   contacts: getFilteredContacts(items, filter),\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onDeleteContact: (id) => dispatch(actions.deleteContact(id)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React from 'react';\nimport './Container.scss';\n\nconst Container = ({ children }) => <div className=\"Container\">{children}</div>;\n\nexport default Container;","import { useEffect } from 'react';\nimport ContactForm from 'components/ContactForm';\nimport Filter from 'components/Filter';\nimport ContactList from 'components/ContactList'\nimport Container from 'components/Container';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { operations } from 'redux/contacts';\nimport { getLoading } from 'redux/contacts';\nimport Loader from 'react-loader-spinner';\nimport './App.scss';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\nexport default function App() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getLoading);\n\n  useEffect(() => {\n    dispatch(operations.fetchContacts());\n  }, [dispatch]);\n\n    return (\n      <Container>\n        <h1>Phonebook</h1>\n        <ContactForm />\n\n        <h2>Contacts</h2>\n        <Filter />\n\n        {isLoading &&\n          <Loader\n            type=\"Puff\"\n            color=\"#00BFFF\"\n            height={100}\n            width={100}\n          />}\n        \n        <ContactList />\n      </Container>\n    )\n  }","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  fetchContacts,\n  addContact,\n  deleteContact,\n} from './contacts-operations';\nimport { changeFilter } from './contacts-actions';\n\nconst items = createReducer([], {\n  [fetchContacts.fulfilled]: (_, {payload}) => payload,  \n  [addContact.fulfilled]: (state, { payload }) => [payload, ...state],\n  [deleteContact.fulfilled]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst loading = createReducer(false, {\n  [fetchContacts.pending]: () => true,\n  [fetchContacts.fulfilled]: () => false,\n  [fetchContacts.rejected]: () => false,\n  [addContact.pending]: () => true,\n  [addContact.fulfilled]: () => false,\n  [addContact.rejected]: () => false,\n  [deleteContact.pending]: () => true,\n  [deleteContact.fulfilled]: () => false,\n  [deleteContact.rejected]: () => false,\n})\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nconst error = createReducer(null, {\n  [fetchContacts.rejected]: (_, action) => action.payload,\n  [fetchContacts.pending]: () => null,\n  [addContact.rejected]: (_, action) => action.payload,\n  [addContact.pending]: () => null,\n  [deleteContact.rejected]: (_, action) => action.payload,\n  [deleteContact.pending]: () => null,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n  loading,\n  error,\n});\n\n\n\n/*\nimport { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  changeFilter,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n} from './contacts-actions';\n\nconst items = createReducer([], {\n  [fetchContactsSuccess]: (_, {payload}) => payload,  \n  [addContactSuccess]: (state, { payload }) => [payload, ...state],\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst loading = createReducer(false, {\n  [fetchContactsRequest]: () => true,\n  [fetchContactsSuccess]: () => false,\n  [fetchContactsError]: () => false,\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n})\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nconst error = createReducer(null, {\n  [fetchContactsError]: (_, action) => action.payload,\n  [fetchContactsRequest]: () => null,\n  [addContactError]: (_, action) => action.payload,\n  [addContactRequest]: () => null,\n  [deleteContactError]: (_, action) => action.payload,\n  [deleteContactRequest]: () => null,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n  loading,\n  error,\n});\n*/\n\n\n// const existedContacts = [\n//   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n// ];","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\nimport contactsReducer from './contacts/contacts-reducer';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n];\n\nexport const store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n// export const persistor  = persistStore(store);\n\nexport default store;\n\n\n\n\n// import { createStore, combineReducers } from 'redux';\n// import { composeWithDevTools } from 'redux-devtools-extension';\n// import contactsReducer from './contacts/contacts-reducer';\n\n// const rootReducer = combineReducers({\n//   contacts: contactsReducer,\n// });\n\n// const store = createStore(rootReducer, composeWithDevTools());\n\n// export default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport store from './redux/store';\nimport './index.scss';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={persistor}> */}\n        <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}