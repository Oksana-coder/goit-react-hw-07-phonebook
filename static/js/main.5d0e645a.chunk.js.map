{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/Container/Container.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","operations","fetchContacts","dispatch","a","get","data","addContact","name","number","contact","post","then","catch","error","deleteContact","id","delete","getContacts","state","contacts","items","getFilter","filter","getLoading","loading","getFilteredContacts","createSelector","normalizedFilter","toLowerCase","includes","ContactForm","useState","setName","setNumber","existingContacts","useSelector","useDispatch","handleChange","event","target","value","className","onSubmit","preventDefault","newContact","map","alert","type","onChange","pattern","title","required","Filter","currentTarget","ContactListItem","onDeleteContact","onClick","ContactList","Container","children","App","isLoading","useEffect","color","height","width","createReducer","_","payload","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d0e645a.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactsRequest = createAction('contacts/fetchContactsRequest');\nexport const fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\nexport const changeFilter = createAction('contacts/changeFilter');\n","import axios from 'axios';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n} from './contacts-actions';\n\naxios.defaults.baseURL = 'http://localhost:4040';\n\nconst fetchContacts = () => async dispatch => {\n  dispatch(fetchContactsRequest());\n\n  try {\n    const { data } = await axios.get('/contacts');\n    dispatch(fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactsError(error));\n  };\n\n  // axios\n  //   .get('/contacts')\n  //   .then(({ data }) => dispatch(fetchContactsSuccess(data)))\n  //   .catch(error => dispatch(fetchContactsError(error)));\n}\n\nconst addContact = ({ name, number }) => dispatch => {\n  const contact = {\n    name,\n    number,\n  };\n\n  dispatch(addContactRequest());\n\n  axios\n    .post('/contacts', contact)\n    .then(({ data }) =>\n      dispatch(addContactSuccess(data)))\n    .catch(error => dispatch(addContactError(error)));\n};\n\nconst deleteContact = id => dispatch => {\n  dispatch(deleteContactRequest());\n\n  axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(deleteContactSuccess(id)))\n    .catch(error => dispatch(deleteContactError(error)));\n};\n\nconst operations = { fetchContacts, addContact, deleteContact };\n\nexport default operations;","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\nexport const getLoading = state => state.contacts.loading;\n\nexport const getFilteredContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n\n\n// export const getFilteredContacts = state => {        //example without memoization\n//   const contacts = getContacts(state);\n//   const filter = getFilter(state);\n//   const normalizedFilter = filter.toLowerCase();\n\n//   return contacts.filter(({ name }) =>\n//     name.toLowerCase().includes(normalizedFilter),\n//   );\n// };","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { operations } from '../../redux/contacts';\nimport { getContacts } from '../../redux/contacts';\nimport './ContactForm.scss';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const existingContacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      \n      case 'number':\n        setNumber(value);\n        break;\n      \n      default:\n        return;\n    }\n  };\n  \n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const newContact = name.toLowerCase();\n    const existingContactsNames = existingContacts.map(contact => contact.name.toLowerCase());\n    if (existingContactsNames.includes(newContact)) {\n      alert(`${newContact} is already in contacts.`);\n      return;\n    }\n\n    dispatch(operations.addContact({name, number}));\n    setName('');\n    setNumber('');\n  };\n  \n    return (\n      <form className=\"contact-form\" onSubmit={handleSubmit}>\n      <label className=\"contact-form__label\">\n        Name\n        <input\n          type=\"text\"\n          className=\"contact-form__input\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label className=\"contact-form__label\">\n        Number\n        <input\n          type=\"tel\"\n          className=\"contact-form__input\"  \n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n        <button\n          type=\"submit\"\n          className=\"contact-form__btn\"\n        >\n        Add contact\n      </button> \n    </form>\n    )\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeFilter } from '../../redux/contacts';\nimport { getFilter } from '../../redux/contacts';\nimport './Filter.scss';\n\nconst Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label className=\"contact-filter\">\n      Find contacts by name\n      <input\n        type=\"text\"\n        className=\"contact-filter__input\"\n        value={value}\n        onChange={event => dispatch(changeFilter(event.currentTarget.value))} />\n    </label>\n  );\n};\n\nexport default Filter;\n\n\n\n\n// const mapStateToProps = (state) => ({\n//   value: state.contacts.filter,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onChange: (event) => dispatch(actions.changeFilter(event.target.value)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './ContactListItem.scss';\n\nconst ContactListItem = ({ name, number, onDeleteContact }) => (\n  <>\n    <span>{name}: {number}</span>\n    <button type=\"button\" className=\"contact-list__delete-btn\" onClick={onDeleteContact}>Delete</button>\n  </>\n);\n\nContactListItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ContactListItem from '../ContactListItem';\nimport { operations } from '../../redux/contacts';\nimport { getFilteredContacts } from '../../redux/contacts';\nimport './ContactList.scss';\n\n\nconst ContactList = () => {\n  const contacts = useSelector(getFilteredContacts);\n  const dispatch = useDispatch();\n\n  const onDeleteContact = id => dispatch(operations.deleteContact(id));\n\n  return(\n  <ul>\n    {contacts.map(({ id, name, number}) => (\n      <li key={id} className=\"contact-list__item\">\n        <ContactListItem\n          name={name}\n          number={number}\n          onDeleteContact={() => onDeleteContact(id)}\n        />\n      </li>\n    ))}\n  </ul>\n);\n};\n\nexport default ContactList;\n\n\n\n\n// const getFilteredContacts = (allContacts, filter) => {\n//   const normalizedFilter = filter.toLowerCase();\n\n//   return allContacts.filter(contact =>\n//     contact.name.toLowerCase().includes(normalizedFilter),\n//   );\n// };\n\n// const mapStateToProps = ({ contacts: { items, filter } }) => ({\n//   contacts: getFilteredContacts(items, filter),\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onDeleteContact: (id) => dispatch(actions.deleteContact(id)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React from 'react';\nimport './Container.scss';\n\nconst Container = ({ children }) => <div className=\"Container\">{children}</div>;\n\nexport default Container;","import { useEffect } from 'react';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList'\nimport Container from './components/Container';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { operations } from './redux/contacts';\nimport { getLoading } from './redux/contacts';\nimport Loader from 'react-loader-spinner';\nimport './App.scss';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\nexport default function App() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getLoading);\n\n  useEffect(() => {\n    dispatch(operations.fetchContacts());\n  }, [dispatch]);\n\n    return (\n      <Container>\n        <h1>Phonebook</h1>\n        <ContactForm />\n\n        <h2>Contacts</h2>\n        <Filter />\n\n        {isLoading &&\n          <Loader\n            type=\"Puff\"\n            color=\"#00BFFF\"\n            height={100}\n            width={100}\n          />}\n        \n        <ContactList />\n      </Container>\n    )\n  }","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  changeFilter,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n} from './contacts-actions';\n\nconst items = createReducer([], {\n  [fetchContactsSuccess]: (_, {payload}) => payload,  \n  [addContactSuccess]: (state, { payload }) => [payload, ...state],\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst loading = createReducer(false, {\n  [fetchContactsRequest]: () => true,\n  [fetchContactsSuccess]: () => false,\n  [fetchContactsError]: () => false,\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n})\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nconst error = createReducer(null, {});\n\nexport default combineReducers({\n  items,\n  filter,\n  loading,\n  error,\n});\n\n\n\n// const existedContacts = [\n//   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n// ];","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\nimport contactsReducer from './contacts/contacts-reducer';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n];\n\nexport const store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n// export const persistor  = persistStore(store);\n\nexport default store;\n\n\n\n\n// import { createStore, combineReducers } from 'redux';\n// import { composeWithDevTools } from 'redux-devtools-extension';\n// import contactsReducer from './contacts/contacts-reducer';\n\n// const rootReducer = combineReducers({\n//   contacts: contactsReducer,\n// });\n\n// const store = createStore(rootReducer, composeWithDevTools());\n\n// export default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport store from './redux/store';\nimport './index.scss';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={persistor}> */}\n        <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}